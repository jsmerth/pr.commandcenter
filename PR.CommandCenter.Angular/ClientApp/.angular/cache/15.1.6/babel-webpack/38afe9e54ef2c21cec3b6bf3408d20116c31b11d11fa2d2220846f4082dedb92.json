{"ast":null,"code":"import { __decorate, __param } from \"tslib\";\nimport { Component, Inject } from '@angular/core';\nlet FetchDataComponent = class FetchDataComponent {\n  constructor(http, baseUrl) {\n    this.bots = [];\n    this._bots = [];\n    this.detailIsActive = false;\n    this.mapIsActive = false;\n    this.filters = [];\n    this.suggestedFilters = [];\n    this.filterKeyword = \"\";\n    this.filterIsActive = false;\n    this.countries = [];\n    this.regions = [];\n    this.cities = [];\n    this.businesses = [];\n    this.clickBotId = bot => {\n      this.detailIsActive = true;\n      this.detailBot = bot;\n    };\n    //- adds a new filter if it isn't a duplicate\n    this.clickBotProperty = (property, value) => {\n      if (!this.filters.some(f => f.property === property && f.value === value)) {\n        this.filters.push({\n          property,\n          value\n        });\n        this._filter();\n      }\n      this.suggestedFilters = [];\n      this.filterKeyword = \"\";\n    };\n    //- removes an existing filter\n    this.clickFilterProperty = (property, value) => {\n      this.filters = this.filters.filter((v, i, a) => {\n        if (v.property === property && v.value === value) return false;\n        return true;\n      });\n      this._filter();\n    };\n    this.keypressFilter = keyword => {\n      const regex = new RegExp(keyword, 'gi');\n      this.suggestedFilters = [...this.countries, ...this.regions, ...this.cities, ...this.businesses].filter((v, i, a) => v.value.match(regex));\n    };\n    this.blurFilter = () => {\n      setTimeout(() => {\n        this.filterIsActive = false;\n        this.suggestedFilters = [];\n      }, 500);\n    };\n    this.focusFilter = () => {\n      this.filterIsActive = true;\n    };\n    this._filter = () => {\n      this.bots = this._bots.filter((v, i, a) => {\n        let include = true;\n        this.filters.forEach(x => {\n          if (v[x.property] !== x.value) include = false;\n        });\n        return include;\n      });\n      if (this.filterIsActive) this._buildFilterableItems();\n    };\n    this._buildFilterableItems = () => {\n      this.countries = [...new Set(this.bots.map(v => v.country).sort())].map(v => new Filter('country', v));\n      this.regions = [...new Set(this.bots.map(v => v.region).sort())].map(v => new Filter('region', v));\n      this.cities = [...new Set(this.bots.map(v => v.city).sort())].map(v => new Filter('city', v));\n      this.businesses = [...new Set(this.bots.map(v => v.business).sort())].map(v => new Filter('business', v));\n    };\n    http.get('http://localhost:7234/api/Bots').subscribe(result => {\n      //set master list\n      this._bots = result.items;\n      //set working list\n      this.bots = result.items;\n      this._buildFilterableItems();\n    }, error => console.error(error));\n  }\n  //- clears the filters and resets the bot list to the master list\n  clearFilter() {\n    this.bots = this._bots;\n    this.filters = [];\n    this._buildFilterableItems();\n  }\n};\nFetchDataComponent = __decorate([Component({\n  selector: 'app-fetch-data',\n  templateUrl: './fetch-data.component.html',\n  styleUrls: ['./fetch-data.component.less']\n}), __param(1, Inject('BASE_URL'))], FetchDataComponent);\nexport { FetchDataComponent };\nclass Filter {\n  constructor(p, v) {\n    this.value = '';\n    this.property = '';\n    this.value = v;\n    this.property = p;\n  }\n}","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,eAAe;AAU1C,IAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAmB7BC,YAAYC,IAAgB,EAAsBC,OAAe;IAjB1D,SAAI,GAAW,EAAE;IAChB,UAAK,GAAW,EAAE;IAEnB,mBAAc,GAAY,KAAK;IAG/B,gBAAW,GAAY,KAAK;IAE5B,YAAO,GAAc,EAAE;IACvB,qBAAgB,GAAc,EAAE;IAChC,kBAAa,GAAW,EAAE;IAC1B,mBAAc,GAAY,KAAK;IAC/B,cAAS,GAAc,EAAE;IACzB,YAAO,GAAc,EAAE;IACvB,WAAM,GAAc,EAAE;IACtB,eAAU,GAAc,EAAE;IAa1B,eAAU,GAAIC,GAAS,IAAI;MAChC,IAAI,CAACC,cAAc,GAAG,IAAI;MAC1B,IAAI,CAACC,SAAS,GAAGF,GAAG;IACtB,CAAC;IACD;IACO,qBAAgB,GAAG,CAACG,QAAgB,EAAEC,KAAa,KAAI;MAC5D,IAAI,CAAC,IAAI,CAACC,OAAO,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACJ,QAAQ,KAAKA,QAAQ,IAAII,CAAC,CAACH,KAAK,KAAKA,KAAK,CAAC,EAAE;QACzE,IAAI,CAACC,OAAO,CAACG,IAAI,CAAC;UAAEL,QAAQ;UAAEC;QAAK,CAAE,CAAC;QAEtC,IAAI,CAACK,OAAO,EAAE;;MAEhB,IAAI,CAACC,gBAAgB,GAAG,EAAE;MAC1B,IAAI,CAACC,aAAa,GAAG,EAAE;IACzB,CAAC;IACD;IACO,wBAAmB,GAAG,CAACR,QAAgB,EAAEC,KAAa,KAAI;MAC/D,IAAI,CAACC,OAAO,GAAG,IAAI,CAACA,OAAO,CAACO,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,KAAI;QAC7C,IAAIF,CAAC,CAACV,QAAQ,KAAKA,QAAQ,IAAIU,CAAC,CAACT,KAAK,KAAKA,KAAK,EAAE,OAAO,KAAK;QAC9D,OAAO,IAAI;MACb,CAAC,CAAC;MAEF,IAAI,CAACK,OAAO,EAAE;IAChB,CAAC;IAOM,mBAAc,GAAIO,OAAe,IAAI;MAC1C,MAAMC,KAAK,GAAG,IAAIC,MAAM,CAACF,OAAO,EAAE,IAAI,CAAC;MACvC,IAAI,CAACN,gBAAgB,GAAG,CAAC,GAAG,IAAI,CAACS,SAAS,EAAE,GAAG,IAAI,CAACC,OAAO,EAAE,GAAG,IAAI,CAACC,MAAM,EAAE,GAAG,IAAI,CAACC,UAAU,CAAC,CAACV,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,KAAKF,CAAC,CAACT,KAAK,CAACmB,KAAK,CAACN,KAAK,CAAC,CAAC;IAC5I,CAAC;IACM,eAAU,GAAG,MAAK;MACvBO,UAAU,CAAC,MAAK;QACd,IAAI,CAACC,cAAc,GAAG,KAAK;QAC3B,IAAI,CAACf,gBAAgB,GAAG,EAAE;MAC5B,CAAC,EAAE,GAAG,CAAC;IACT,CAAC;IACM,gBAAW,GAAG,MAAK;MACxB,IAAI,CAACe,cAAc,GAAG,IAAI;IAC5B,CAAC;IAEO,YAAO,GAAG,MAAK;MACrB,IAAI,CAACC,IAAI,GAAG,IAAI,CAACC,KAAK,CAACf,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,KAAI;QACxC,IAAIa,OAAO,GAAG,IAAI;QAClB,IAAI,CAACvB,OAAO,CAACwB,OAAO,CAACC,CAAC,IAAG;UACvB,IAAIjB,CAAC,CAACiB,CAAC,CAAC3B,QAAsB,CAAC,KAAK2B,CAAC,CAAC1B,KAAK,EAAEwB,OAAO,GAAG,KAAK;QAC9D,CAAC,CAAC;QACF,OAAOA,OAAO;MAChB,CAAC,CAAC;MAEF,IAAI,IAAI,CAACH,cAAc,EAAE,IAAI,CAACM,qBAAqB,EAAE;IACvD,CAAC;IACO,0BAAqB,GAAG,MAAK;MACnC,IAAI,CAACZ,SAAS,GAAG,CAAC,GAAG,IAAIa,GAAG,CAAC,IAAI,CAACN,IAAI,CAACO,GAAG,CAAEpB,CAAC,IAAKA,CAAC,CAACqB,OAAO,CAAC,CAACC,IAAI,EAAE,CAAC,CAAC,CAACF,GAAG,CAAEpB,CAAC,IAAK,IAAIuB,MAAM,CAAC,SAAS,EAAEvB,CAAC,CAAC,CAAC;MAC1G,IAAI,CAACO,OAAO,GAAG,CAAC,GAAG,IAAIY,GAAG,CAAC,IAAI,CAACN,IAAI,CAACO,GAAG,CAAEpB,CAAC,IAAKA,CAAC,CAACwB,MAAM,CAAC,CAACF,IAAI,EAAE,CAAC,CAAC,CAACF,GAAG,CAAEpB,CAAC,IAAK,IAAIuB,MAAM,CAAC,QAAQ,EAAEvB,CAAC,CAAC,CAAC;MACtG,IAAI,CAACQ,MAAM,GAAG,CAAC,GAAG,IAAIW,GAAG,CAAC,IAAI,CAACN,IAAI,CAACO,GAAG,CAAEpB,CAAC,IAAKA,CAAC,CAACyB,IAAI,CAAC,CAACH,IAAI,EAAE,CAAC,CAAC,CAACF,GAAG,CAAEpB,CAAC,IAAK,IAAIuB,MAAM,CAAC,MAAM,EAAEvB,CAAC,CAAC,CAAC;MACjG,IAAI,CAACS,UAAU,GAAG,CAAC,GAAG,IAAIU,GAAG,CAAC,IAAI,CAACN,IAAI,CAACO,GAAG,CAAEpB,CAAC,IAAKA,CAAC,CAAC0B,QAAQ,CAAC,CAACJ,IAAI,EAAE,CAAC,CAAC,CAACF,GAAG,CAAEpB,CAAC,IAAK,IAAIuB,MAAM,CAAC,UAAU,EAAEvB,CAAC,CAAC,CAAC;IAC/G,CAAC;IArECf,IAAI,CAAC0C,GAAG,CAAQ,gCAAgC,CAAC,CAACC,SAAS,CAACC,MAAM,IAAG;MACnE;MACA,IAAI,CAACf,KAAK,GAAGe,MAAM,CAACC,KAAK;MACzB;MACA,IAAI,CAACjB,IAAI,GAAGgB,MAAM,CAACC,KAAK;MACxB,IAAI,CAACZ,qBAAqB,EAAE;IAE9B,CAAC,EAAEa,KAAK,IAAIC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC;EACnC;EAyBA;EACOE,WAAW;IAChB,IAAI,CAACpB,IAAI,GAAG,IAAI,CAACC,KAAK;IACtB,IAAI,CAACtB,OAAO,GAAG,EAAE;IACjB,IAAI,CAAC0B,qBAAqB,EAAE;EAC9B;CAgCD;AA1FYnC,kBAAkB,eAN9BF,SAAS,CAAC;EACTqD,QAAQ,EAAE,gBAAgB;EAC1BC,WAAW,EAAE,6BAA6B;EAC1CC,SAAS,EAAE,CAAC,6BAA6B;CAC1C,CAAC,EAqB+BC,iBAAM,CAAC,UAAU,CAAC,IAnBtCtD,kBAAkB,CA0F9B;SA1FYA,kBAAkB;AA8G/B,MAAMwC,MAAM;EACVvC,YAAYsD,CAAS,EAAEtC,CAAS;IAIhC,UAAK,GAAW,EAAE;IAClB,aAAQ,GAAW,EAAE;IAJnB,IAAI,CAACT,KAAK,GAAGS,CAAC;IACd,IAAI,CAACV,QAAQ,GAAGgD,CAAC;EACnB","names":["Component","Inject","FetchDataComponent","constructor","http","baseUrl","bot","detailIsActive","detailBot","property","value","filters","some","f","push","_filter","suggestedFilters","filterKeyword","filter","v","i","a","keyword","regex","RegExp","countries","regions","cities","businesses","match","setTimeout","filterIsActive","bots","_bots","include","forEach","x","_buildFilterableItems","Set","map","country","sort","Filter","region","city","business","get","subscribe","result","items","error","console","clearFilter","selector","templateUrl","styleUrls","__param","p"],"sourceRoot":"","sources":["D:\\50.Work\\53.Code\\PringleRobotics\\PR.CommandCenter\\PR.CommandCenter.Angular\\ClientApp\\src\\app\\fetch-data\\fetch-data.component.ts"],"sourcesContent":["import { Component, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Loader } from '@googlemaps/js-api-loader'\r\n\r\n@Component({\r\n  selector: 'app-fetch-data',\r\n  templateUrl: './fetch-data.component.html',\r\n  styleUrls: ['./fetch-data.component.less']\r\n})\r\n\r\nexport class FetchDataComponent {\r\n\r\n  public bots: IBot[] = [];\r\n  private _bots: IBot[] = [];\r\n\r\n  public detailIsActive: boolean = false;\r\n  public detailBot!: IBot;\r\n\r\n  public mapIsActive: boolean = false;\r\n\r\n  public filters: IFilter[] = [];\r\n  public suggestedFilters: IFilter[] = [];\r\n  public filterKeyword: string = \"\";\r\n  public filterIsActive: boolean = false;\r\n  public countries: IFilter[] = [];\r\n  public regions: IFilter[] = [];\r\n  public cities: IFilter[] = [];\r\n  public businesses: IFilter[] = [];\r\n\r\n  constructor(http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n    http.get<IBots>('http://localhost:7234/api/Bots').subscribe(result => {\r\n      //set master list\r\n      this._bots = result.items;\r\n      //set working list\r\n      this.bots = result.items;\r\n      this._buildFilterableItems();\r\n\r\n    }, error => console.error(error));\r\n  }\r\n\r\n  public clickBotId = (bot: IBot) => {\r\n    this.detailIsActive = true;\r\n    this.detailBot = bot;\r\n  }\r\n  //- adds a new filter if it isn't a duplicate\r\n  public clickBotProperty = (property: string, value: string) => {\r\n    if (!this.filters.some(f => f.property === property && f.value === value)) {\r\n      this.filters.push({ property, value })\r\n\r\n      this._filter();\r\n    }\r\n    this.suggestedFilters = [];\r\n    this.filterKeyword = \"\";\r\n  }\r\n  //- removes an existing filter\r\n  public clickFilterProperty = (property: string, value: string) => {\r\n    this.filters = this.filters.filter((v, i, a) => {\r\n      if (v.property === property && v.value === value) return false;\r\n      return true;\r\n    });\r\n\r\n    this._filter();\r\n  }\r\n  //- clears the filters and resets the bot list to the master list\r\n  public clearFilter() {\r\n    this.bots = this._bots;\r\n    this.filters = [];\r\n    this._buildFilterableItems();\r\n  }\r\n  public keypressFilter = (keyword: string) => {\r\n    const regex = new RegExp(keyword, 'gi');\r\n    this.suggestedFilters = [...this.countries, ...this.regions, ...this.cities, ...this.businesses].filter((v, i, a) => v.value.match(regex));\r\n  }\r\n  public blurFilter = () => {\r\n    setTimeout(() => {\r\n      this.filterIsActive = false;\r\n      this.suggestedFilters = [];\r\n    }, 500)\r\n  }\r\n  public focusFilter = () => {\r\n    this.filterIsActive = true;\r\n  }\r\n\r\n  private _filter = () => {\r\n    this.bots = this._bots.filter((v, i, a) => {\r\n      let include = true;\r\n      this.filters.forEach(x => {\r\n        if (v[x.property as keyof IBot] !== x.value) include = false;\r\n      });\r\n      return include;\r\n    });\r\n\r\n    if (this.filterIsActive) this._buildFilterableItems();\r\n  }\r\n  private _buildFilterableItems = () => {\r\n    this.countries = [...new Set(this.bots.map((v) => v.country).sort())].map((v) => new Filter('country', v));\r\n    this.regions = [...new Set(this.bots.map((v) => v.region).sort())].map((v) => new Filter('region', v));\r\n    this.cities = [...new Set(this.bots.map((v) => v.city).sort())].map((v) => new Filter('city', v));\r\n    this.businesses = [...new Set(this.bots.map((v) => v.business).sort())].map((v) => new Filter('business', v));\r\n  }\r\n}\r\n\r\ninterface IBots {\r\n  items: IBot[]\r\n}\r\ninterface IBot {\r\n  id: string,\r\n  business: string,\r\n  city: string,\r\n  region: string,\r\n  country: string,\r\n  lat: number,\r\n  lon: number,\r\n  dateModified: Date,\r\n  dateCreated: Date,\r\n}\r\ninterface IFilter {\r\n  property: string,\r\n  value: string\r\n}\r\nclass Filter implements IFilter {\r\n  constructor(p: string, v: string) {\r\n    this.value = v;\r\n    this.property = p;\r\n  }\r\n  value: string = '';\r\n  property: string = '';\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}